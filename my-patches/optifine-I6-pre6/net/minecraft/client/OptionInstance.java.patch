--- a/net/minecraft/client/OptionInstance.java
+++ b/net/minecraft/client/OptionInstance.java
@@ -124,11 +124,11 @@
    public T get() {
       if (this instanceof SliderPercentageOptionOF sliderpercentageoptionof) {
          if (this.value instanceof Integer) {
-            return (T)(int)sliderpercentageoptionof.getOptionValue();
+            return (T)(Integer)(int)sliderpercentageoptionof.getOptionValue();
          }
 
          if (this.value instanceof Double) {
-            return (T)sliderpercentageoptionof.getOptionValue();
+            return (T)(Double)sliderpercentageoptionof.getOptionValue();
          }
       }
 
@@ -172,7 +172,7 @@
    public T getMinValue() {
       OptionInstance.IntRangeBase optioninstance$intrangebase = this.getIntRangeBase();
       if (optioninstance$intrangebase != null) {
-         return (T)optioninstance$intrangebase.minInclusive();
+         return (T)(Integer)optioninstance$intrangebase.minInclusive();
       } else {
          throw new IllegalArgumentException("Min value not supported: " + this.getResourceKey());
       }
@@ -181,7 +181,7 @@
    public T getMaxValue() {
       OptionInstance.IntRangeBase optioninstance$intrangebase = this.getIntRangeBase();
       if (optioninstance$intrangebase != null) {
-         return (T)optioninstance$intrangebase.maxInclusive();
+         return (T)(Integer)optioninstance$intrangebase.maxInclusive();
       } else {
          throw new IllegalArgumentException("Max value not supported: " + this.getResourceKey());
       }
@@ -201,11 +201,6 @@
    }
 
    public static record AltEnum<T>(List<T> values, List<T> altValues, BooleanSupplier altCondition, OptionInstance.CycleableValueSet.ValueSetter<T> valueSetter, Codec<T> codec) implements OptionInstance.CycleableValueSet<T> {
-      private final List<T> values;
-      private final List<T> altValues;
-      private final BooleanSupplier altCondition;
-      private final OptionInstance.CycleableValueSet.ValueSetter<T> valueSetter;
-      private final Codec<T> codec;
 
       public CycleButton.ValueListSupplier<T> valueListSupplier() {
          return CycleButton.ValueListSupplier.create(this.altCondition, this.values, this.altValues);
@@ -235,13 +230,6 @@
          return this.altCondition;
       }
 
-      public OptionInstance.CycleableValueSet.ValueSetter<T> valueSetter() {
-         return this.valueSetter;
-      }
-
-      public Codec<T> codec() {
-         return this.codec;
-      }
    }
 
    public interface CaptionBasedToString<T> {
@@ -249,9 +237,6 @@
    }
 
    public static record ClampingLazyMaxIntRange(int minInclusive, IntSupplier maxSupplier, int encodableMaxInclusive) implements OptionInstance.IntRangeBase, OptionInstance.SliderableOrCyclableValueSet<Integer> {
-      private final int minInclusive;
-      private final IntSupplier maxSupplier;
-      private final int encodableMaxInclusive;
 
       public Optional<Integer> validateValue(Integer p_231590_) {
          return Optional.of(Mth.clamp(p_231590_, this.minInclusive(), this.maxInclusive()));
@@ -314,8 +299,6 @@
    }
 
    public static record Enum<T>(List<T> values, Codec<T> codec) implements OptionInstance.CycleableValueSet<T> {
-      private final List<T> values;
-      private final Codec<T> codec;
 
       public Optional<T> validateValue(T p_231632_) {
          return this.values.contains(p_231632_) ? Optional.of(p_231632_) : Optional.empty();
@@ -332,15 +315,9 @@
       public List<T> values() {
          return this.values;
       }
-
-      public Codec<T> codec() {
-         return this.codec;
-      }
    }
 
    public static record IntRange(int minInclusive, int maxInclusive) implements OptionInstance.IntRangeBase {
-      private final int minInclusive;
-      private final int maxInclusive;
 
       public Optional<Integer> validateValue(Integer p_231645_) {
          return p_231645_.compareTo(this.minInclusive()) >= 0 && p_231645_.compareTo(this.maxInclusive()) <= 0 ? Optional.of(p_231645_) : Optional.empty();
@@ -398,9 +375,6 @@
    }
 
    public static record LazyEnum<T>(Supplier<List<T>> values, Function<T, Optional<T>> validateValue, Codec<T> codec) implements OptionInstance.CycleableValueSet<T> {
-      private final Supplier<List<T>> values;
-      private final Function<T, Optional<T>> validateValue;
-      private final Codec<T> codec;
 
       public Optional<T> validateValue(T p_231689_) {
          return this.validateValue.apply(p_231689_);
@@ -422,9 +396,6 @@
          return this.validateValue;
       }
 
-      public Codec<T> codec() {
-         return this.codec;
-      }
    }
 
    static final class OptionInstanceSliderButton<N> extends AbstractOptionSliderButton implements IOptionControl {
