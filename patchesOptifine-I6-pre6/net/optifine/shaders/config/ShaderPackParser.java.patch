--- a/net/optifine/shaders/config/ShaderPackParser.java
+++ b/net/optifine/shaders/config/ShaderPackParser.java
@@ -216,7 +216,7 @@
       String s = "profile.";
       List<ShaderProfile> list = new ArrayList<>();
 
-      for(String s1 : props.keySet()) {
+      for(String s1 : (Set<String>)(Set<?>) props.keySet()) {
          if (s1.startsWith(s)) {
             String s2 = s1.substring(s.length());
             String s3 = props.getProperty(s1);
@@ -241,7 +241,7 @@
       Pattern pattern = Pattern.compile("program\\.([^.]+)\\.enabled");
       Map<String, IExpressionBool> map = new HashMap<>();
 
-      for(String s1 : props.keySet()) {
+      for(String s1 : (Set<String>)(Set<?>) props.keySet()) {
          Matcher matcher = pattern.matcher(s1);
          if (matcher.matches()) {
             String s2 = matcher.group(1);
@@ -615,7 +615,7 @@
       Map<String, IExpression> map = new HashMap<>();
       List<CustomUniform> list = new ArrayList<>();
 
-      for(String s4 : props.keySet()) {
+      for(String s4 : (Set<String>)(Set<?>) props.keySet()) {
          String[] astring = Config.tokenize(s4, ".");
          if (astring.length == 3) {
             String s5 = astring[0];
@@ -680,7 +680,7 @@
    }
 
    public static void parseAlphaStates(Properties props) {
-      for(String s : props.keySet()) {
+      for(String s : (Set<String>)(Set<?>) props.keySet()) {
          String[] astring = Config.tokenize(s, ".");
          if (astring.length == 2) {
             String s1 = astring[0];
@@ -728,7 +728,7 @@
    }
 
    public static void parseBlendStates(Properties props) {
-      for(String s : props.keySet()) {
+      for(String s : (Set<String>)(Set<?>) props.keySet()) {
          String[] astring = Config.tokenize(s, ".");
          if (astring.length >= 2 && astring.length <= 3) {
             String s1 = astring[0];
@@ -797,7 +797,7 @@
    }
 
    public static void parseRenderScales(Properties props) {
-      for(String s : props.keySet()) {
+      for(String s : (Set<String>)(Set<?>) props.keySet()) {
          String[] astring = Config.tokenize(s, ".");
          if (astring.length == 2) {
             String s1 = astring[0];
@@ -847,7 +847,7 @@
    }
 
    public static void parseBuffersFlip(Properties props) {
-      for(String s : props.keySet()) {
+      for(String s : (Set<String>)(Set<?>) props.keySet()) {
          String[] astring = Config.tokenize(s, ".");
          if (astring.length == 3) {
             String s1 = astring[0];
@@ -914,7 +914,7 @@
    public static DynamicDimension[] parseBufferSizes(Properties props, int countBuffers) {
       DynamicDimension[] adynamicdimension = new DynamicDimension[countBuffers];
 
-      for(String s : props.keySet()) {
+      for(String s : (Set<String>)(Set<?>) props.keySet()) {
          if (s.startsWith("size.buffer.")) {
             String[] astring = Config.tokenize(s, ".");
             if (astring.length == 3) {
