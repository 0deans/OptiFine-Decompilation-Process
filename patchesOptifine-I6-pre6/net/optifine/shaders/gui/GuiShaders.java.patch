--- a/net/optifine/shaders/gui/GuiShaders.java
+++ b/net/optifine/shaders/gui/GuiShaders.java
@@ -1,5 +1,6 @@
 package net.optifine.shaders.gui;
 
+import net.minecraft.Util;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.Options;
 import net.minecraft.client.gui.GuiGraphics;
@@ -14,8 +15,13 @@
 import net.optifine.gui.TooltipManager;
 import net.optifine.gui.TooltipProviderEnumShaderOptions;
 import net.optifine.shaders.Shaders;
+import net.optifine.shaders.ShadersTex;
 import net.optifine.shaders.config.EnumShaderOption;
 
+import java.io.File;
+import java.io.IOException;
+import java.net.URI;
+
 public class GuiShaders extends GuiScreenOF {
    protected Screen parentGui;
    private TooltipManager tooltipManager = new TooltipManager(this, new TooltipProviderEnumShaderOptions());
@@ -92,9 +98,179 @@
       this.actionPerformed(button, true);
    }
 
-   private void actionPerformed(AbstractWidget var1, boolean var2) {
-      // $FF: Couldn't be decompiled
+   private void actionPerformed(AbstractWidget guiElement, boolean rightClick) {
+      if (!guiElement.active) {
+         return;
+      }
+      if (!(guiElement instanceof GuiButtonEnumShaderOption)) {
+         if (rightClick) {
+            return;
+         }
+         if (!(guiElement instanceof GuiButtonOF)) {
+            return;
+         }
+         GuiButtonOF button = (GuiButtonOF)guiElement;
+         switch (button.id) {
+            case 201: {
+               switch (GuiShaders.getOSType()) {
+                  case 2: {
+                     try {
+                        Runtime.getRuntime().exec(new String[]{"/usr/bin/open", Shaders.shaderPacksDir.getAbsolutePath()});
+                        return;
+                     }
+                     catch (IOException var7) {
+                        var7.printStackTrace();
+                        break;
+                     }
+                  }
+                  case 1: {
+                     String var2 = String.format("cmd.exe /C start \"Open file\" \"%s\"", Shaders.shaderPacksDir.getAbsolutePath());
+                     try {
+                        Runtime.getRuntime().exec(var2);
+                        return;
+                     }
+                     catch (IOException var6) {
+                        var6.printStackTrace();
+                        break;
+                     }
+                  }
+               }
+               boolean var8 = false;
+               try {
+                  URI uri = new File(this.minecraft.gameDirectory, "shaderpacks").toURI();
+                  Util.getPlatform().openUri(uri);
+               }
+               catch (Throwable var5) {
+                  var5.printStackTrace();
+                  var8 = true;
+               }
+               if (!var8) break;
+               Config.dbg("Opening via system class!");
+               Util.getPlatform().openUri("file://" + Shaders.shaderPacksDir.getAbsolutePath());
+               break;
+            }
+            case 202: {
+               Shaders.storeConfig();
+               this.saved = true;
+               this.minecraft.setScreen(this.parentGui);
+               break;
+            }
+            case 203: {
+               GuiShaderOptions gui = new GuiShaderOptions(this, Config.getGameSettings());
+               Config.getMinecraft().setScreen((Screen)gui);
+               break;
+            }
+            case 210: {
+               try {
+                  URI uri = new URI("http://optifine.net/shaderPacks");
+                  Util.getPlatform().openUri(uri);
+                  break;
+               }
+               catch (Throwable throwable) {
+                  throwable.printStackTrace();
+               }
+            }
+         }
+         return;
+      }
+      GuiButtonEnumShaderOption gbeso = (GuiButtonEnumShaderOption)guiElement;
+      switch (gbeso.getEnumShaderOption()) {
+         case ANTIALIASING: {
+            Shaders.nextAntialiasingLevel(!rightClick);
+            if (GuiShaders.hasShiftDown()) {
+               Shaders.configAntialiasingLevel = 0;
+            }
+            Shaders.uninit();
+            break;
+         }
+         case NORMAL_MAP: {
+            boolean bl = Shaders.configNormalMap = !Shaders.configNormalMap;
+            if (GuiShaders.hasShiftDown()) {
+               Shaders.configNormalMap = true;
+            }
+            Shaders.uninit();
+            this.minecraft.delayTextureReload();
+            break;
+         }
+         case SPECULAR_MAP: {
+            boolean bl = Shaders.configSpecularMap = !Shaders.configSpecularMap;
+            if (GuiShaders.hasShiftDown()) {
+               Shaders.configSpecularMap = true;
+            }
+            Shaders.uninit();
+            this.minecraft.delayTextureReload();
+            break;
+         }
+         case RENDER_RES_MUL: {
+            Shaders.configRenderResMul = this.getNextValue(Shaders.configRenderResMul, QUALITY_MULTIPLIERS, QUALITY_MULTIPLIER_DEFAULT, !rightClick, GuiShaders.hasShiftDown());
+            Shaders.uninit();
+            Shaders.scheduleResize();
+            break;
+         }
+         case SHADOW_RES_MUL: {
+            Shaders.configShadowResMul = this.getNextValue(Shaders.configShadowResMul, QUALITY_MULTIPLIERS, QUALITY_MULTIPLIER_DEFAULT, !rightClick, GuiShaders.hasShiftDown());
+            Shaders.uninit();
+            Shaders.scheduleResizeShadow();
+            break;
+         }
+         case HAND_DEPTH_MUL: {
+            Shaders.configHandDepthMul = this.getNextValue(Shaders.configHandDepthMul, HAND_DEPTH_VALUES, HAND_DEPTH_DEFAULT, !rightClick, GuiShaders.hasShiftDown());
+            Shaders.uninit();
+            break;
+         }
+         case OLD_HAND_LIGHT: {
+            Shaders.configOldHandLight.nextValue(!rightClick);
+            if (GuiShaders.hasShiftDown()) {
+               Shaders.configOldHandLight.resetValue();
+            }
+            Shaders.uninit();
+            break;
+         }
+         case OLD_LIGHTING: {
+            Shaders.configOldLighting.nextValue(!rightClick);
+            if (GuiShaders.hasShiftDown()) {
+               Shaders.configOldLighting.resetValue();
+            }
+            Shaders.updateBlockLightLevel();
+            Shaders.uninit();
+            this.minecraft.delayTextureReload();
+            break;
+         }
+         case TWEAK_BLOCK_DAMAGE: {
+            Shaders.configTweakBlockDamage = !Shaders.configTweakBlockDamage;
+            break;
+         }
+         case CLOUD_SHADOW: {
+            Shaders.configCloudShadow = !Shaders.configCloudShadow;
+            break;
+         }
+         case TEX_MIN_FIL_B: {
+            Shaders.configTexMinFilN = Shaders.configTexMinFilS = (Shaders.configTexMinFilB = (Shaders.configTexMinFilB + 1) % 3);
+            gbeso.setMessage("Tex Min: " + Shaders.texMinFilDesc[Shaders.configTexMinFilB]);
+            ShadersTex.updateTextureMinMagFilter();
+            break;
+         }
+         case TEX_MAG_FIL_N: {
+            Shaders.configTexMagFilN = (Shaders.configTexMagFilN + 1) % 2;
+            gbeso.setMessage("Tex_n Mag: " + Shaders.texMagFilDesc[Shaders.configTexMagFilN]);
+            ShadersTex.updateTextureMinMagFilter();
+            break;
+         }
+         case TEX_MAG_FIL_S: {
+            Shaders.configTexMagFilS = (Shaders.configTexMagFilS + 1) % 2;
+            gbeso.setMessage("Tex_s Mag: " + Shaders.texMagFilDesc[Shaders.configTexMagFilS]);
+            ShadersTex.updateTextureMinMagFilter();
+            break;
+         }
+         case SHADOW_CLIP_FRUSTRUM: {
+            Shaders.configShadowClipFrustrum = !Shaders.configShadowClipFrustrum;
+            gbeso.setMessage("ShadowClipFrustrum: " + GuiShaders.toStringOnOff(Shaders.configShadowClipFrustrum));
+            ShadersTex.updateTextureMinMagFilter();
+         }
+      }
+      gbeso.updateButtonText();
    }
+
 
    public void removed() {
       if (!this.saved) {
