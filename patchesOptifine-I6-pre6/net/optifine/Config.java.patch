--- a/net/optifine/Config.java
+++ b/net/optifine/Config.java
@@ -876,7 +876,7 @@
          }
       }
 
-      PackResources[] apackresources = list.toArray(new PackResources[list.size()]);
+      PackResources[] apackresources = (PackResources[]) list.toArray(new PackResources[list.size()]);
       return apackresources;
    }
 
@@ -1145,7 +1145,7 @@
          list.add(s);
       }
 
-      String[] astring = list.toArray(new String[list.size()]);
+      String[] astring = (String[]) list.toArray(new String[list.size()]);
       return astring;
    }
 
@@ -1244,7 +1244,7 @@
       while(true) {
          String s = bufferedreader.readLine();
          if (s == null) {
-            return list.toArray(new String[list.size()]);
+            return (String[]) list.toArray(new String[list.size()]);
          }
 
          list.add(s);
@@ -1469,7 +1469,7 @@
       } else {
          int i = arr.length;
          int j = i + 1;
-         Object[] aobject = Array.newInstance(arr.getClass().getComponentType(), j);
+         Object[] aobject = (Object[]) Array.newInstance(arr.getClass().getComponentType(), j);
          System.arraycopy(arr, 0, aobject, 0, i);
          aobject[i] = obj;
          return aobject;
@@ -1479,7 +1479,7 @@
    public static Object[] addObjectToArray(Object[] arr, Object obj, int index) {
       List list = new ArrayList<>(Arrays.asList(arr));
       list.add(index, obj);
-      Object[] aobject = Array.newInstance(arr.getClass().getComponentType(), list.size());
+      Object[] aobject = (Object[]) Array.newInstance(arr.getClass().getComponentType(), list.size());
       return list.toArray(aobject);
    }
 
@@ -1491,7 +1491,7 @@
       } else {
          int i = arr.length;
          int j = i + objs.length;
-         Object[] aobject = Array.newInstance(arr.getClass().getComponentType(), j);
+         Object[] aobject = (Object[]) Array.newInstance(arr.getClass().getComponentType(), j);
          System.arraycopy(arr, 0, aobject, 0, i);
          System.arraycopy(objs, 0, aobject, i, objs.length);
          return aobject;
@@ -1512,7 +1512,7 @@
       } else if (elementClass.isPrimitive()) {
          throw new IllegalArgumentException("Can not make arrays with primitive elements (int, double), element class: " + elementClass);
       } else {
-         Object[] aobject = Array.newInstance(elementClass, coll.size());
+         Object[] aobject = (Object[]) Array.newInstance(elementClass, coll.size());
          return coll.toArray(aobject);
       }
    }
