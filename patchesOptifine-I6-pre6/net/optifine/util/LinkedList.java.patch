--- a/net/optifine/util/LinkedList.java
+++ b/net/optifine/util/LinkedList.java
@@ -3,148 +3,147 @@
 import java.util.Iterator;
 
 public class LinkedList<T> {
-   private LinkedList.Node<T> first;
-   private LinkedList.Node<T> last;
+   private Node<T> first;
+   private Node<T> last;
    private int size;
 
-   public void addFirst(LinkedList.Node<T> node) {
-      this.checkNoParent(node);
-      if (this.isEmpty()) {
-         this.first = node;
-         this.last = node;
-      } else {
-         LinkedList.Node<T> node = this.first;
-         node.setNext(node);
-         node.setPrev(node);
-         this.first = node;
-      }
-
-      node.setParent(this);
-      ++this.size;
-   }
-
-   public void addLast(LinkedList.Node<T> node) {
-      this.checkNoParent(node);
-      if (this.isEmpty()) {
-         this.first = node;
-         this.last = node;
-      } else {
-         LinkedList.Node<T> node = this.last;
-         node.setPrev(node);
-         node.setNext(node);
-         this.last = node;
-      }
-
-      node.setParent(this);
-      ++this.size;
-   }
-
-   public void addAfter(LinkedList.Node<T> nodePrev, LinkedList.Node<T> node) {
+   public void addFirst(Node<T> node) {
+      this.checkNoParent(node);
+      if (this.isEmpty()) {
+         this.first = node;
+         this.last = node;
+      } else {
+         Node<T> nodeNext = this.first;
+         node.setNext(nodeNext);
+         nodeNext.setPrev(node);
+         this.first = node;
+      }
+      node.setParent(this);
+      ++this.size;
+   }
+
+   public void addLast(Node<T> node) {
+      this.checkNoParent(node);
+      if (this.isEmpty()) {
+         this.first = node;
+         this.last = node;
+      } else {
+         Node<T> nodePrev = this.last;
+         node.setPrev(nodePrev);
+         nodePrev.setNext(node);
+         this.last = node;
+      }
+      node.setParent(this);
+      ++this.size;
+   }
+
+   public void addAfter(Node<T> nodePrev, Node<T> node) {
       if (nodePrev == null) {
          this.addFirst(node);
-      } else if (nodePrev == this.last) {
+         return;
+      }
+      if (nodePrev == this.last) {
          this.addLast(node);
-      } else {
-         this.checkParent(nodePrev);
-         this.checkNoParent(node);
-         LinkedList.Node<T> node = nodePrev.getNext();
-         nodePrev.setNext(node);
-         node.setPrev(nodePrev);
-         node.setPrev(node);
-         node.setNext(node);
-         node.setParent(this);
-         ++this.size;
+         return;
       }
+      this.checkParent(nodePrev);
+      this.checkNoParent(node);
+      Node<T> nodeNext = nodePrev.getNext();
+      nodePrev.setNext(node);
+      node.setPrev(nodePrev);
+      nodeNext.setPrev(node);
+      node.setNext(nodeNext);
+      node.setParent(this);
+      ++this.size;
    }
 
-   public LinkedList.Node<T> remove(LinkedList.Node<T> node) {
+   public Node<T> remove(Node<T> node) {
       this.checkParent(node);
-      LinkedList.Node<T> node = node.getPrev();
-      LinkedList.Node<T> node1 = node.getNext();
-      if (node != null) {
-         node.setNext(node1);
-      } else {
-         this.first = node1;
-      }
-
-      if (node1 != null) {
-         node1.setPrev(node);
-      } else {
-         this.last = node;
-      }
-
-      node.setPrev((LinkedList.Node<T>)null);
-      node.setNext((LinkedList.Node<T>)null);
-      node.setParent((LinkedList<T>)null);
+      Node<T> prev = node.getPrev();
+      Node<T> next = node.getNext();
+      if (prev != null) {
+         prev.setNext(next);
+      } else {
+         this.first = next;
+      }
+      if (next != null) {
+         next.setPrev(prev);
+      } else {
+         this.last = prev;
+      }
+      node.setPrev(null);
+      node.setNext(null);
+      node.setParent(null);
       --this.size;
       return node;
    }
 
-   public void moveAfter(LinkedList.Node<T> nodePrev, LinkedList.Node<T> node) {
+   public void moveAfter(Node<T> nodePrev, Node<T> node) {
       this.remove(node);
       this.addAfter(nodePrev, node);
    }
 
-   public boolean find(LinkedList.Node<T> nodeFind, LinkedList.Node<T> nodeFrom, LinkedList.Node<T> nodeTo) {
+   public boolean find(Node<T> nodeFind, Node<T> nodeFrom, Node<T> nodeTo) {
+      Node<T> node;
       this.checkParent(nodeFrom);
       if (nodeTo != null) {
          this.checkParent(nodeTo);
       }
-
-      LinkedList.Node<T> node;
-      for(node = nodeFrom; node != null && node != nodeTo; node = node.getNext()) {
-         if (node == nodeFind) {
-            return true;
-         }
+      for (node = nodeFrom; node != null && node != nodeTo; node = node.getNext()) {
+         if (node != nodeFind) continue;
+         return true;
       }
-
       if (node != nodeTo) {
          throw new IllegalArgumentException("Sublist is not linked, from: " + nodeFrom + ", to: " + nodeTo);
-      } else {
-         return false;
       }
+      return false;
    }
 
-   private void checkParent(LinkedList.Node<T> node) {
+   private void checkParent(Node<T> node) {
       if (node.parent != this) {
          throw new IllegalArgumentException("Node has different parent, node: " + node + ", parent: " + node.parent + ", this: " + this);
       }
    }
 
-   private void checkNoParent(LinkedList.Node<T> node) {
+   private void checkNoParent(Node<T> node) {
       if (node.parent != null) {
          throw new IllegalArgumentException("Node has different parent, node: " + node + ", parent: " + node.parent + ", this: " + this);
       }
    }
 
-   public boolean contains(LinkedList.Node<T> node) {
+   public boolean contains(Node<T> node) {
       return node.parent == this;
    }
 
-   public Iterator<LinkedList.Node<T>> iterator() {
-      return new Iterator<LinkedList.Node<T>>() {
-         LinkedList.Node<T> node = LinkedList.this.getFirst();
+   public Iterator<Node<T>> iterator() {
+      Iterator it = new Iterator<Node<T>>(){
+         Node<T> node;
+         {
+            this.node = LinkedList.this.getFirst();
+         }
 
+         @Override
          public boolean hasNext() {
             return this.node != null;
          }
 
-         public LinkedList.Node<T> next() {
-            LinkedList.Node<T> node = this.node;
+         @Override
+         public Node<T> next() {
+            Node ret = this.node;
             if (this.node != null) {
                this.node = this.node.next;
             }
-
-            return node;
+            return ret;
          }
       };
+      return it;
    }
 
-   public LinkedList.Node<T> getFirst() {
+   public Node<T> getFirst() {
       return this.first;
    }
 
-   public LinkedList.Node<T> getLast() {
+   public Node<T> getLast() {
       return this.last;
    }
 
@@ -157,23 +156,22 @@
    }
 
    public String toString() {
-      StringBuffer stringbuffer = new StringBuffer();
-
-      for(LinkedList.Node<T> node : this) {
-         if (stringbuffer.length() > 0) {
-            stringbuffer.append(", ");
+      StringBuffer sb = new StringBuffer();
+      Iterator<Node<T>> it = this.iterator();
+      while (it.hasNext()) {
+         Node<T> node = it.next();
+         if (sb.length() > 0) {
+            sb.append(", ");
          }
-
-         stringbuffer.append(node.getItem());
+         sb.append(node.getItem());
       }
-
-      return this.size + " [" + stringbuffer.toString() + "]";
+      return this.size + " [" + sb.toString() + "]";
    }
 
    public static class Node<T> {
       private final T item;
-      private LinkedList.Node<T> prev;
-      private LinkedList.Node<T> next;
+      private Node<T> prev;
+      private Node<T> next;
       private LinkedList<T> parent;
 
       public Node(T item) {
@@ -184,19 +182,19 @@
          return this.item;
       }
 
-      public LinkedList.Node<T> getPrev() {
+      public Node<T> getPrev() {
          return this.prev;
       }
 
-      public LinkedList.Node<T> getNext() {
+      public Node<T> getNext() {
          return this.next;
       }
 
-      private void setPrev(LinkedList.Node<T> prev) {
+      private void setPrev(Node<T> prev) {
          this.prev = prev;
       }
 
-      private void setNext(LinkedList.Node<T> next) {
+      private void setNext(Node<T> next) {
          this.next = next;
       }
 
