--- a/net/optifine/expr/ExpressionParser.java
+++ b/net/optifine/expr/ExpressionParser.java
@@ -176,49 +176,42 @@
    }
 
    private FunctionType getFunctionType(Token token, Deque<Token> deque) throws ParseException {
-      Token token = deque.peek();
-      if (token != null && token.getType() == TokenType.BRACKET_OPEN) {
-         FunctionType functiontype1 = FunctionType.parse(token.getText());
-         checkNull(functiontype1, "Unknown function: " + token);
-         return functiontype1;
-      } else {
-         FunctionType functiontype = FunctionType.parse(token.getText());
-         if (functiontype == null) {
-            return null;
-         } else if (functiontype.getParameterCount(new IExpression[0]) > 0) {
-            throw new ParseException("Missing arguments: " + functiontype);
-         } else {
-            return functiontype;
-         }
-      }
+      Token tokenNext = deque.peek();
+      if (tokenNext != null && tokenNext.getType() == TokenType.BRACKET_OPEN) {
+         FunctionType type = FunctionType.parse(token.getText());
+         ExpressionParser.checkNull((Object)type, "Unknown function: " + token);
+         return type;
+      }
+      FunctionType type = FunctionType.parse(token.getText());
+      if (type == null) {
+         return null;
+      }
+      if (type.getParameterCount(new IExpression[0]) > 0) {
+         throw new ParseException("Missing arguments: " + type);
+      }
+      return type;
    }
 
    private IExpression makeFunction(FunctionType type, Deque<Token> deque) throws ParseException {
-      if (type.getParameterCount(new IExpression[0]) == 0) {
-         Token token = deque.peek();
-         if (token == null || token.getType() != TokenType.BRACKET_OPEN) {
-            return makeFunction(type, new IExpression[0]);
-         }
+      Token tokenNext;
+      if (type.getParameterCount(new IExpression[0]) == 0 && ((tokenNext = deque.peek()) == null || tokenNext.getType() != TokenType.BRACKET_OPEN)) {
+         return ExpressionParser.makeFunction(type, new IExpression[0]);
       }
-
-      Token token1 = deque.poll();
-      Deque<Token> deque = getGroup(deque, TokenType.BRACKET_CLOSE, true);
-      IExpression[] aiexpression = this.parseExpressions(deque);
-      return makeFunction(type, aiexpression);
+      Token tokenOpen = deque.poll();
+      Deque<Token> dequeBracketed = ExpressionParser.getGroup(deque, TokenType.BRACKET_CLOSE, true);
+      IExpression[] exprs = this.parseExpressions(dequeBracketed);
+      return ExpressionParser.makeFunction(type, exprs);
    }
 
    private IExpression[] parseExpressions(Deque<Token> deque) throws ParseException {
-      List<IExpression> list = new ArrayList<>();
-
-      while(true) {
-         Deque<Token> deque = getGroup(deque, TokenType.COMMA, false);
-         IExpression iexpression = this.parseInfix(deque);
-         if (iexpression == null) {
-            return list.toArray(new IExpression[list.size()]);
-         }
-
-         list.add(iexpression);
+      Deque<Token> dequeArg;
+      IExpression expr;
+      ArrayList<IExpression> list = new ArrayList<IExpression>();
+      while ((expr = this.parseInfix(dequeArg = ExpressionParser.getGroup(deque, TokenType.COMMA, false))) != null) {
+         list.add(expr);
       }
+      IExpression[] exprs = list.toArray(new IExpression[list.size()]);
+      return exprs;
    }
 
    private static IExpression makeFunction(FunctionType type, IExpression[] args) throws ParseException {
@@ -261,37 +254,31 @@
    }
 
    private IExpression makeBracketed(Token token, Deque<Token> deque) throws ParseException {
-      Deque<Token> deque = getGroup(deque, TokenType.BRACKET_CLOSE, true);
-      return this.parseInfix(deque);
+      Deque<Token> dequeBracketed = ExpressionParser.getGroup(deque, TokenType.BRACKET_CLOSE, true);
+      return this.parseInfix(dequeBracketed);
    }
 
    private static Deque<Token> getGroup(Deque<Token> deque, TokenType tokenTypeEnd, boolean tokenEndRequired) throws ParseException {
-      Deque<Token> deque = new ArrayDeque<>();
-      int i = 0;
-      Iterator iterator = deque.iterator();
-
-      while(iterator.hasNext()) {
-         Token token = (Token)iterator.next();
-         iterator.remove();
-         if (i == 0 && token.getType() == tokenTypeEnd) {
-            return deque;
+      ArrayDeque<Token> dequeGroup = new ArrayDeque<Token>();
+      int level = 0;
+      Iterator<Token> it = deque.iterator();
+      while (it.hasNext()) {
+         Token token = it.next();
+         it.remove();
+         if (level == 0 && token.getType() == tokenTypeEnd) {
+            return dequeGroup;
          }
-
-         deque.add(token);
+         dequeGroup.add(token);
          if (token.getType() == TokenType.BRACKET_OPEN) {
-            ++i;
-         }
-
-         if (token.getType() == TokenType.BRACKET_CLOSE) {
-            --i;
-         }
+            ++level;
+         }
+         if (token.getType() != TokenType.BRACKET_CLOSE) continue;
+         --level;
       }
-
       if (tokenEndRequired) {
          throw new ParseException("Missing end token: " + tokenTypeEnd);
-      } else {
-         return deque;
       }
+      return dequeGroup;
    }
 
    private static void checkNull(Object obj, String message) throws ParseException {
