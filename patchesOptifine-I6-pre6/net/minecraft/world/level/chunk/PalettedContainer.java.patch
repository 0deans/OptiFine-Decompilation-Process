--- a/net/minecraft/world/level/chunk/PalettedContainer.java
+++ b/net/minecraft/world/level/chunk/PalettedContainer.java
@@ -56,7 +56,7 @@
    }
 
    private static <T, C extends PalettedContainerRO<T>> Codec<C> codec(IdMap<T> pRegistry, Codec<T> pCodec, PalettedContainer.Strategy pStrategy, T pValue, PalettedContainerRO.Unpacker<T, C> pUnpacker) {
-      return RecordCodecBuilder.<PalettedContainerRO.PackedData>create((p_188044_2_) -> {
+      return RecordCodecBuilder.<PalettedContainerRO.PackedData<T>>create((p_188044_2_) -> {
          return p_188044_2_.group(pCodec.mapResult(ExtraCodecs.orElsePartial(pValue)).listOf().fieldOf("palette").forGetter(PalettedContainerRO.PackedData::paletteEntries), Codec.LONG_STREAM.optionalFieldOf("data").forGetter(PalettedContainerRO.PackedData::storage)).apply(p_188044_2_, PalettedContainerRO.PackedData::new);
       }).comapFlatMap((p_188078_3_) -> {
          return pUnpacker.read(pRegistry, pStrategy, p_188078_3_);
@@ -304,8 +304,6 @@
    }
 
    static record Configuration<T>(Palette.Factory factory, int bits) {
-      private final Palette.Factory factory;
-      private final int bits;
 
       public PalettedContainer.Data<T> createData(IdMap<T> pRegistry, PaletteResize<T> pPaletteResize, int pSize) {
          BitStorage bitstorage = (BitStorage)(this.bits == 0 ? new ZeroBitStorage(pSize) : new SimpleBitStorage(this.bits, pSize));
@@ -328,9 +326,6 @@
    }
 
    static record Data<T>(PalettedContainer.Configuration<T> configuration, BitStorage storage, Palette<T> palette) {
-      private final PalettedContainer.Configuration<T> configuration;
-      private final BitStorage storage;
-      private final Palette<T> palette;
 
       public void copyFrom(Palette<T> pPalette, BitStorage pBitStorage) {
          for(int i = 0; i < pBitStorage.getSize(); ++i) {
