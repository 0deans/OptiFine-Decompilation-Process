--- a/net/minecraft/client/renderer/texture/TextureAtlas.java
+++ b/net/minecraft/client/renderer/texture/TextureAtlas.java
@@ -163,7 +163,7 @@
          }
 
          if (Config.isShaders()) {
-            Collection collection = pPreparations.regions().values();
+            Collection<TextureAtlasSprite> collection = pPreparations.regions().values();
             if (Shaders.configNormalMap) {
                GlStateManager._bindTexture(this.getMultiTexID().norm);
 
@@ -232,11 +232,11 @@
       TextureUtils.registerCustomSpriteLocations(this.location(), set);
       TextureUtils.registerCustomSprites(this);
       set.addAll(this.mapRegisteredSprites.keySet());
-      Set<ResourceLocation> set = newHashSet(set, this.mapRegisteredSprites.keySet());
-      EmissiveTextures.updateIcons(this, set);
-      set.addAll(this.mapRegisteredSprites.keySet());
+      Set<ResourceLocation> set2 = newHashSet(set, this.mapRegisteredSprites.keySet());
+      EmissiveTextures.updateIcons(this, set2);
+      set2.addAll(this.mapRegisteredSprites.keySet());
       if (this.mipmapLevel >= 4) {
-         this.mipmapLevel = this.detectMaxMipmapLevel(set, resourceManagerIn);
+         this.mipmapLevel = this.detectMaxMipmapLevel(set2, resourceManagerIn);
          Config.log("Mipmap levels: " + this.mipmapLevel);
       }
 
@@ -557,7 +557,7 @@
                      if (!map.containsKey(j)) {
                         map.put(j, 1);
                      } else {
-                        int k = map.get(j);
+                        int k = (int) map.get(j);
                         map.put(j, k + 1);
                      }
                   }
@@ -571,8 +571,8 @@
       Set set = map.keySet();
       Set set1 = new TreeSet(set);
 
-      for(int j1 : set1) {
-         int l1 = map.get(j1);
+      for(int j1 : (Set<Integer>)(Set<?>) set1) {
+         int l1 = (int) map.get(j1);
          l += l1;
       }
 
@@ -580,8 +580,8 @@
       int k1 = 0;
       int i2 = l * percentScale / 100;
 
-      for(int j2 : set1) {
-         int k2 = map.get(j2);
+      for(int j2 : (Set<Integer>)(Set<?>) set1) {
+         int k2 = (int) map.get(j2);
          k1 += k2;
          if (j2 > i1) {
             i1 = j2;
