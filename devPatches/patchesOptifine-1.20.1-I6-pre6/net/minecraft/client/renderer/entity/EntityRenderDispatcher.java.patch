--- a/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
+++ b/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
@@ -108,9 +108,9 @@
       if (pEntity instanceof AbstractClientPlayer) {
          String s = ((AbstractClientPlayer)pEntity).getModelName();
          EntityRenderer<? extends Player> entityrenderer = this.playerRenderers.get(s);
-         return entityrenderer != null ? entityrenderer : this.playerRenderers.get("default");
+         return entityrenderer != null ? (EntityRenderer <? super T >)entityrenderer : (EntityRenderer <? super T >)this.playerRenderers.get("default");
       } else {
-         return this.renderers.get(pEntity.getType());
+         return (EntityRenderer <? super T >)this.renderers.get(pEntity.getType());
       }
    }
 
@@ -419,7 +419,7 @@
       ReflectorForge.postModLoaderEvent(Reflector.EntityRenderersEvent_AddLayers_Constructor, this.renderers, this.playerRenderers, entityrendererprovider$context);
    }
 
-   private static void registerPlayerItems(Map<String, EntityRenderer> renderPlayerMap) {
+   private static void registerPlayerItems(Map<String, EntityRenderer<? extends Player>> renderPlayerMap) {
       boolean flag = false;
 
       for(EntityRenderer entityrenderer : renderPlayerMap.values()) {
@@ -436,7 +436,7 @@
 
    }
 
-   public Map<EntityType, EntityRenderer> getEntityRenderMap() {
+   public Map<EntityType<?>, EntityRenderer<?>> getEntityRenderMap() {
       if (this.renderers instanceof ImmutableMap) {
          this.renderers = new HashMap<>(this.renderers);
       }
